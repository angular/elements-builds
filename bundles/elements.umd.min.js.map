{"version":3,"sources":["packages/elements/elements.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","elements","core","rxjs","operators","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","elProto","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","scheduler","schedule","taskFn","delay","id","setTimeout","clearTimeout","scheduleBeforeRender","window","requestAnimationFrame","cancelAnimationFrame","findMatchingIndex","node","selectors","defaultIndex","matchingIndex","isElement","nodeType","Node","ELEMENT_NODE","some","selector","element","ComponentNgElementStrategyFactory","component","injector","componentFactory","get","ComponentFactoryResolver","resolveComponentFactory","ComponentNgElementStrategy","inputChanges","implementsOnChanges","scheduledChangeDetectionFn","scheduledDestroyFn","initialInputValues","Map","uninitializedInputs","Set","connect","componentRef","initializeComponent","disconnect","_this","destroy","getInputValue","property","instance","setInputValue","strictEquals","value1","value2","recordInputChange","scheduleDetectChanges","set","childInjector","Injector","providers","parent","projectableNodes","extractProjectableNodes","host","ngContentSelectors","nodes","childNodes","map","wildcardIndex","ii","length","ngContentIndex","isFunction","ngOnChanges","initializeInputs","initializeOutputs","detectChanges","ApplicationRef","attachView","hostView","inputs","forEach","_a","propName","initialValue","add","clear","eventEmitters","outputs","templateName","pipe","name","events","merge","apply","__spread","arguments","concat","callNgOnChanges","currentValue","pendingChange","isFirstChange","has","delete","previousValue","undefined","SimpleChange","changeDetectorRef","NgElement","_super","ngElementEventsSubscription","HTMLElement","VERSION","Version","createCustomElement","config","getComponentInputs","strategyFactory","attributeToPropertyInputs","getDefaultAttributeToPropertyInputs","camelToDashCase","input","replace","char","toLowerCase","NgElementImpl","ngElementStrategy","attributeChangedCallback","attrName","oldValue","newValue","namespace","connectedCallback","subscribe","customEvent","createCustomEvent","doc","detail","CustomEvent","event_1","createEvent","initCustomEvent","bubbles","cancelable","ownerDocument","dispatchEvent","disconnectedCallback","unsubscribe","keys","defineProperty","configurable","enumerable"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.0.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/elements', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.elements = {}),global.ng.core,global.rxjs,global.rxjs.operators));\n}(this, (function (exports,core,rxjs,operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var elProto = Element.prototype;\n    var matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    /**\n     * Provide methods for scheduling the execution of a callback.\n     */\n    var scheduler = {\n        /**\n         * Schedule a callback to be called after some delay.\n         *\n         * Returns a function that when executed will cancel the scheduled function.\n         */\n        schedule: function (taskFn, delay) { var id = setTimeout(taskFn, delay); return function () { return clearTimeout(id); }; },\n        /**\n         * Schedule a callback to be called before the next render.\n         * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n         *\n         * Returns a function that when executed will cancel the scheduled function.\n         */\n        scheduleBeforeRender: function (taskFn) {\n            // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n            //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n            if (typeof window === 'undefined') {\n                // For SSR just schedule immediately.\n                return scheduler.schedule(taskFn, 0);\n            }\n            if (typeof window.requestAnimationFrame === 'undefined') {\n                var frameMs = 16;\n                return scheduler.schedule(taskFn, frameMs);\n            }\n            var id = window.requestAnimationFrame(taskFn);\n            return function () { return window.cancelAnimationFrame(id); };\n        },\n    };\n    /**\n     * Convert a camelCased string to kebab-cased.\n     */\n    function camelToDashCase(input) {\n        return input.replace(/[A-Z]/g, function (char) { return \"-\" + char.toLowerCase(); });\n    }\n    /**\n     * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n     */\n    function createCustomEvent(doc, name, detail) {\n        var bubbles = false;\n        var cancelable = false;\n        // On IE9-11, `CustomEvent` is not a constructor.\n        if (typeof CustomEvent !== 'function') {\n            var event_1 = doc.createEvent('CustomEvent');\n            event_1.initCustomEvent(name, bubbles, cancelable, detail);\n            return event_1;\n        }\n        return new CustomEvent(name, { bubbles: bubbles, cancelable: cancelable, detail: detail });\n    }\n    /**\n     * Check whether the input is an `Element`.\n     */\n    function isElement(node) {\n        return !!node && node.nodeType === Node.ELEMENT_NODE;\n    }\n    /**\n     * Check whether the input is a function.\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    /**\n     * Check whether an `Element` matches a CSS selector.\n     */\n    function matchesSelector(element, selector) {\n        return matches.call(element, selector);\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(value1, value2) {\n        return value1 === value2 || (value1 !== value1 && value2 !== value2);\n    }\n    /** Gets a map of default set of attributes to observe and the properties they affect. */\n    function getDefaultAttributeToPropertyInputs(inputs) {\n        var attributeToPropertyInputs = {};\n        inputs.forEach(function (_a) {\n            var propName = _a.propName, templateName = _a.templateName;\n            attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n        });\n        return attributeToPropertyInputs;\n    }\n    /**\n     * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n     * are defined.\n     */\n    function getComponentInputs(component, injector) {\n        var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n        var componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n        return componentFactory.inputs;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function extractProjectableNodes(host, ngContentSelectors) {\n        var nodes = host.childNodes;\n        var projectableNodes = ngContentSelectors.map(function () { return []; });\n        var wildcardIndex = -1;\n        ngContentSelectors.some(function (selector, i) {\n            if (selector === '*') {\n                wildcardIndex = i;\n                return true;\n            }\n            return false;\n        });\n        for (var i = 0, ii = nodes.length; i < ii; ++i) {\n            var node = nodes[i];\n            var ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n            if (ngContentIndex !== -1) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingIndex(node, selectors, defaultIndex) {\n        var matchingIndex = defaultIndex;\n        if (isElement(node)) {\n            selectors.some(function (selector, i) {\n                if ((selector !== '*') && matchesSelector(node, selector)) {\n                    matchingIndex = i;\n                    return true;\n                }\n                return false;\n            });\n        }\n        return matchingIndex;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in milliseconds to wait before destroying the component ref when disconnected. */\n    var DESTROY_DELAY = 10;\n    /**\n     * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n     * constructor's injector's factory resolver and passes that factory to each strategy.\n     *\n     * @publicApi\n     */\n    var ComponentNgElementStrategyFactory = /** @class */ (function () {\n        function ComponentNgElementStrategyFactory(component, injector) {\n            this.component = component;\n            this.injector = injector;\n            this.componentFactory =\n                injector.get(core.ComponentFactoryResolver).resolveComponentFactory(component);\n        }\n        ComponentNgElementStrategyFactory.prototype.create = function (injector) {\n            return new ComponentNgElementStrategy(this.componentFactory, injector);\n        };\n        return ComponentNgElementStrategyFactory;\n    }());\n    /**\n     * Creates and destroys a component ref using a component factory and handles change detection\n     * in response to input changes.\n     *\n     * @publicApi\n     */\n    var ComponentNgElementStrategy = /** @class */ (function () {\n        function ComponentNgElementStrategy(componentFactory, injector) {\n            this.componentFactory = componentFactory;\n            this.injector = injector;\n            /** Changes that have been made to the component ref since the last time onChanges was called. */\n            this.inputChanges = null;\n            /** Whether the created component implements the onChanges function. */\n            this.implementsOnChanges = false;\n            /** Whether a change detection has been scheduled to run on the component. */\n            this.scheduledChangeDetectionFn = null;\n            /** Callback function that when called will cancel a scheduled destruction on the component. */\n            this.scheduledDestroyFn = null;\n            /** Initial input values that were set before the component was created. */\n            this.initialInputValues = new Map();\n            /** Set of inputs that were not initially set when the component was created. */\n            this.uninitializedInputs = new Set();\n        }\n        /**\n         * Initializes a new component if one has not yet been created and cancels any scheduled\n         * destruction.\n         */\n        ComponentNgElementStrategy.prototype.connect = function (element) {\n            // If the element is marked to be destroyed, cancel the task since the component was reconnected\n            if (this.scheduledDestroyFn !== null) {\n                this.scheduledDestroyFn();\n                this.scheduledDestroyFn = null;\n                return;\n            }\n            if (!this.componentRef) {\n                this.initializeComponent(element);\n            }\n        };\n        /**\n         * Schedules the component to be destroyed after some small delay in case the element is just\n         * being moved across the DOM.\n         */\n        ComponentNgElementStrategy.prototype.disconnect = function () {\n            var _this = this;\n            // Return if there is no componentRef or the component is already scheduled for destruction\n            if (!this.componentRef || this.scheduledDestroyFn !== null) {\n                return;\n            }\n            // Schedule the component to be destroyed after a small timeout in case it is being\n            // moved elsewhere in the DOM\n            this.scheduledDestroyFn = scheduler.schedule(function () {\n                if (_this.componentRef) {\n                    _this.componentRef.destroy();\n                    _this.componentRef = null;\n                }\n            }, DESTROY_DELAY);\n        };\n        /**\n         * Returns the component property value. If the component has not yet been created, the value is\n         * retrieved from the cached initialization values.\n         */\n        ComponentNgElementStrategy.prototype.getInputValue = function (property) {\n            if (!this.componentRef) {\n                return this.initialInputValues.get(property);\n            }\n            return this.componentRef.instance[property];\n        };\n        /**\n         * Sets the input value for the property. If the component has not yet been created, the value is\n         * cached and set when the component is created.\n         */\n        ComponentNgElementStrategy.prototype.setInputValue = function (property, value) {\n            if (strictEquals(value, this.getInputValue(property))) {\n                return;\n            }\n            if (!this.componentRef) {\n                this.initialInputValues.set(property, value);\n                return;\n            }\n            this.recordInputChange(property, value);\n            this.componentRef.instance[property] = value;\n            this.scheduleDetectChanges();\n        };\n        /**\n         * Creates a new component through the component factory with the provided element host and\n         * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n         */\n        ComponentNgElementStrategy.prototype.initializeComponent = function (element) {\n            var childInjector = core.Injector.create({ providers: [], parent: this.injector });\n            var projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n            this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n            this.implementsOnChanges =\n                isFunction(this.componentRef.instance.ngOnChanges);\n            this.initializeInputs();\n            this.initializeOutputs();\n            this.detectChanges();\n            var applicationRef = this.injector.get(core.ApplicationRef);\n            applicationRef.attachView(this.componentRef.hostView);\n        };\n        /** Set any stored initial inputs on the component's properties. */\n        ComponentNgElementStrategy.prototype.initializeInputs = function () {\n            var _this = this;\n            this.componentFactory.inputs.forEach(function (_a) {\n                var propName = _a.propName;\n                var initialValue = _this.initialInputValues.get(propName);\n                if (initialValue) {\n                    _this.setInputValue(propName, initialValue);\n                }\n                else {\n                    // Keep track of inputs that were not initialized in case we need to know this for\n                    // calling ngOnChanges with SimpleChanges\n                    _this.uninitializedInputs.add(propName);\n                }\n            });\n            this.initialInputValues.clear();\n        };\n        /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n        ComponentNgElementStrategy.prototype.initializeOutputs = function () {\n            var _this = this;\n            var eventEmitters = this.componentFactory.outputs.map(function (_a) {\n                var propName = _a.propName, templateName = _a.templateName;\n                var emitter = _this.componentRef.instance[propName];\n                return emitter.pipe(operators.map(function (value) { return ({ name: templateName, value: value }); }));\n            });\n            this.events = rxjs.merge.apply(void 0, __spread(eventEmitters));\n        };\n        /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n        ComponentNgElementStrategy.prototype.callNgOnChanges = function () {\n            if (!this.implementsOnChanges || this.inputChanges === null) {\n                return;\n            }\n            // Cache the changes and set inputChanges to null to capture any changes that might occur\n            // during ngOnChanges.\n            var inputChanges = this.inputChanges;\n            this.inputChanges = null;\n            this.componentRef.instance.ngOnChanges(inputChanges);\n        };\n        /**\n         * Schedules change detection to run on the component.\n         * Ignores subsequent calls if already scheduled.\n         */\n        ComponentNgElementStrategy.prototype.scheduleDetectChanges = function () {\n            var _this = this;\n            if (this.scheduledChangeDetectionFn) {\n                return;\n            }\n            this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(function () {\n                _this.scheduledChangeDetectionFn = null;\n                _this.detectChanges();\n            });\n        };\n        /**\n         * Records input changes so that the component receives SimpleChanges in its onChanges function.\n         */\n        ComponentNgElementStrategy.prototype.recordInputChange = function (property, currentValue) {\n            // Do not record the change if the component does not implement `OnChanges`.\n            if (this.componentRef && !this.implementsOnChanges) {\n                return;\n            }\n            if (this.inputChanges === null) {\n                this.inputChanges = {};\n            }\n            // If there already is a change, modify the current value to match but leave the values for\n            // previousValue and isFirstChange.\n            var pendingChange = this.inputChanges[property];\n            if (pendingChange) {\n                pendingChange.currentValue = currentValue;\n                return;\n            }\n            var isFirstChange = this.uninitializedInputs.has(property);\n            this.uninitializedInputs.delete(property);\n            var previousValue = isFirstChange ? undefined : this.getInputValue(property);\n            this.inputChanges[property] = new core.SimpleChange(previousValue, currentValue, isFirstChange);\n        };\n        /** Runs change detection on the component. */\n        ComponentNgElementStrategy.prototype.detectChanges = function () {\n            if (!this.componentRef) {\n                return;\n            }\n            this.callNgOnChanges();\n            this.componentRef.changeDetectorRef.detectChanges();\n        };\n        return ComponentNgElementStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Implements the functionality needed for a custom element.\n     *\n     * @publicApi\n     */\n    var NgElement = /** @class */ (function (_super) {\n        __extends(NgElement, _super);\n        function NgElement() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /**\n             * A subscription to change, connect, and disconnect events in the custom element.\n             */\n            _this.ngElementEventsSubscription = null;\n            return _this;\n        }\n        return NgElement;\n    }(HTMLElement));\n    /**\n     *  @description Creates a custom element class based on an Angular component.\n     *\n     * Builds a class that encapsulates the functionality of the provided component and\n     * uses the configuration information to provide more context to the class.\n     * Takes the component factory's inputs and outputs to convert them to the proper\n     * custom element API and add hooks to input changes.\n     *\n     * The configuration's injector is the initial injector set on the class,\n     * and used by default for each created instance.This behavior can be overridden with the\n     * static property to affect all newly created instances, or as a constructor argument for\n     * one-off creations.\n     *\n     * @param component The component to transform.\n     * @param config A configuration that provides initialization information to the created class.\n     * @returns The custom-element construction class, which can be registered with\n     * a browser's `CustomElementRegistry`.\n     *\n     * @publicApi\n     */\n    function createCustomElement(component, config) {\n        var inputs = getComponentInputs(component, config.injector);\n        var strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n        var attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n        var NgElementImpl = /** @class */ (function (_super) {\n            __extends(NgElementImpl, _super);\n            function NgElementImpl(injector) {\n                var _this = _super.call(this) || this;\n                // Note that some polyfills (e.g. document-register-element) do not call the constructor.\n                // Do not assume this strategy has been created.\n                // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n                // now this is tested using a Google internal test suite.\n                _this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n                return _this;\n            }\n            NgElementImpl.prototype.attributeChangedCallback = function (attrName, oldValue, newValue, namespace) {\n                if (!this.ngElementStrategy) {\n                    this.ngElementStrategy = strategyFactory.create(config.injector);\n                }\n                var propName = attributeToPropertyInputs[attrName];\n                this.ngElementStrategy.setInputValue(propName, newValue);\n            };\n            NgElementImpl.prototype.connectedCallback = function () {\n                var _this = this;\n                if (!this.ngElementStrategy) {\n                    this.ngElementStrategy = strategyFactory.create(config.injector);\n                }\n                this.ngElementStrategy.connect(this);\n                // Listen for events from the strategy and dispatch them as custom events\n                this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(function (e) {\n                    var customEvent = createCustomEvent(_this.ownerDocument, e.name, e.value);\n                    _this.dispatchEvent(customEvent);\n                });\n            };\n            NgElementImpl.prototype.disconnectedCallback = function () {\n                if (this.ngElementStrategy) {\n                    this.ngElementStrategy.disconnect();\n                }\n                if (this.ngElementEventsSubscription) {\n                    this.ngElementEventsSubscription.unsubscribe();\n                    this.ngElementEventsSubscription = null;\n                }\n            };\n            // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n            // field externs. So using quoted access to explicitly prevent renaming.\n            NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n            return NgElementImpl;\n        }(NgElement));\n        // Add getters and setters to the prototype for each property input. If the config does not\n        // contain property inputs, use all inputs by default.\n        inputs.map(function (_a) {\n            var propName = _a.propName;\n            return propName;\n        }).forEach(function (property) {\n            Object.defineProperty(NgElementImpl.prototype, property, {\n                get: function () { return this.ngElementStrategy.getInputValue(property); },\n                set: function (newValue) { this.ngElementStrategy.setInputValue(property, newValue); },\n                configurable: true,\n                enumerable: true,\n            });\n        });\n        return NgElementImpl;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @publicApi\n     */\n    var VERSION = new core.Version('7.0.4');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.NgElement = NgElement;\n    exports.createCustomElement = createCustomElement;\n    exports.VERSION = VERSION;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=elements.umd.js.map\n"]}