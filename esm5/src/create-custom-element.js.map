{"version":3,"file":"create-custom-element.js","sourceRoot":"","sources":["../../../../../packages/elements/src/create-custom-element.ts"],"names":[],"mappings":";;;;;;;;;;;;AAWA,OAAO,EAAC,iCAAiC,EAAC,MAAM,8BAA8B,CAAC;AAE/E,OAAO,EAAC,iBAAiB,EAAE,kBAAkB,EAAE,mCAAmC,EAAC,MAAM,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;AAkBnG;;;;;;AAAA;IAAwC,qCAAW;;;4CAEU,IAAI;;;oBAjCjE;EA+BwC,WAAW,EAQlD,CAAA;;;;;;;AARD,qBAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCD,MAAM,8BACF,SAAoB,EAAE,MAAuB;IAC/C,qBAAM,MAAM,GAAG,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAE9D,qBAAM,eAAe,GACjB,MAAM,CAAC,eAAe,IAAI,IAAI,iCAAiC,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAEhG,qBAAM,yBAAyB,GAAG,mCAAmC,CAAC,MAAM,CAAC,CAAC;;QAElD,yCAAS;QAGnC,uBAAY,QAAmB;YAA/B,YACE,iBAAO,SAER;YADC,KAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;;SAC9E;;;;;;;;QAED,gDAAwB;;;;;;;QAAxB,UACI,QAAgB,EAAE,QAAqB,EAAE,QAAgB,EAAE,SAAkB;YAC/E,qBAAM,QAAQ,sBAAG,yBAAyB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC1D;;;;QAED,yCAAiB;;;QAAjB;YAAA,iBAQC;YAPC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;YAGrC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,CAAC;gBAC1E,qBAAM,WAAW,GAAG,iBAAiB,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC3E,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;aACjC,CAAC,CAAC;SACJ;;;;QAED,4CAAoB;;;QAApB;YACE,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;YAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;gBAC/C,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;aACzC;SACF;2CA9BoC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;4BAvF/E;MAsF8B,SAAS;;;;;;;IAoCrC,MAAM,CAAC,GAAG,CAAC,UAAC,EAAU;YAAT,sBAAQ;QAAM,OAAA,QAAQ;IAAR,CAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;QACnD,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE;YACvD,GAAG,EAAE,cAAa,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC1E,GAAG,EAAE,UAAS,QAAa,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE;YAC1F,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;KACJ,CAAC,CAAC;IAEH,MAAM,mBAAC,mBAAC,aAAoB,EAA4B,EAAC;CAC1D","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, Type} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {ComponentNgElementStrategyFactory} from './component-factory-strategy';\nimport {NgElementStrategy, NgElementStrategyFactory} from './element-strategy';\nimport {createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs} from './utils';\n\n/**\n * Class constructor based on an Angular Component to be used for custom element registration.\n *\n * @experimental\n */\nexport interface NgElementConstructor<P> {\n  readonly observedAttributes: string[];\n\n  new (injector: Injector): NgElement&WithProperties<P>;\n}\n\n/**\n * Class that extends HTMLElement and implements the functionality needed for a custom element.\n *\n * @experimental\n */\nexport abstract class NgElement extends HTMLElement {\n  protected ngElementStrategy: NgElementStrategy;\n  protected ngElementEventsSubscription: Subscription|null = null;\n\n  abstract attributeChangedCallback(\n      attrName: string, oldValue: string|null, newValue: string, namespace?: string): void;\n  abstract connectedCallback(): void;\n  abstract disconnectedCallback(): void;\n}\n\n/**\n * Additional type information that can be added to the NgElement class for properties added based\n * on the inputs and methods of the underlying component.\n *\n * @experimental\n */\nexport type WithProperties<P> = {\n  [property in keyof P]: P[property]\n};\n\n/**\n * Initialization configuration for the NgElementConstructor which contains the injector to be used\n * for retrieving the component's factory as well as the default context for the component. May\n * provide a custom strategy factory to be used instead of the default.\n *\n * @experimental\n */\nexport interface NgElementConfig {\n  injector: Injector;\n  strategyFactory?: NgElementStrategyFactory;\n}\n\n/**\n * @whatItDoes Creates a custom element class based on an Angular Component. Takes a configuration\n * that provides initialization information to the created class. E.g. the configuration's injector\n * will be the initial injector set on the class which will be used for each created instance.\n *\n * @description Builds a class that encapsulates the functionality of the provided component and\n * uses the config's information to provide more context to the class. Takes the component factory's\n * inputs and outputs to convert them to the proper custom element API and add hooks to input\n * changes. Passes the config's injector to each created instance (may be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations).\n *\n * @experimental\n */\nexport function createCustomElement<P>(\n    component: Type<any>, config: NgElementConfig): NgElementConstructor<P> {\n  const inputs = getComponentInputs(component, config.injector);\n\n  const strategyFactory =\n      config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  class NgElementImpl extends NgElement {\n    static readonly observedAttributes = Object.keys(attributeToPropertyInputs);\n\n    constructor(injector?: Injector) {\n      super();\n      this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n    }\n\n    attributeChangedCallback(\n        attrName: string, oldValue: string|null, newValue: string, namespace?: string): void {\n      const propName = attributeToPropertyInputs[attrName] !;\n      this.ngElementStrategy.setInputValue(propName, newValue);\n    }\n\n    connectedCallback(): void {\n      this.ngElementStrategy.connect(this);\n\n      // Listen for events from the strategy and dispatch them as custom events\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = createCustomEvent(this.ownerDocument, e.name, e.value);\n        this.dispatchEvent(customEvent);\n      });\n    }\n\n    disconnectedCallback(): void {\n      this.ngElementStrategy.disconnect();\n\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n  }\n\n  // Add getters and setters to the prototype for each property input. If the config does not\n  // contain property inputs, use all inputs by default.\n  inputs.map(({propName}) => propName).forEach(property => {\n    Object.defineProperty(NgElementImpl.prototype, property, {\n      get: function() { return this.ngElementStrategy.getInputValue(property); },\n      set: function(newValue: any) { this.ngElementStrategy.setInputValue(property, newValue); },\n      configurable: true,\n      enumerable: true,\n    });\n  });\n\n  return (NgElementImpl as any) as NgElementConstructor<P>;\n}\n"]}