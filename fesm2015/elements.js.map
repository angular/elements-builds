{"version":3,"file":"elements.js","sources":["../src/utils.ts","../src/extract-projectable-nodes.ts","../src/component-factory-strategy.ts","../src/create-custom-element.ts","../src/version.ts","../elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nconst elProto = Element.prototype as any;\nconst matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n    elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nexport const scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule(taskFn: () => void, delay: number): () =>\n      void{const id = setTimeout(taskFn, delay); return () => clearTimeout(id);},\n\n  /**\n   * Schedule a callback to be called before the next render.\n   * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  scheduleBeforeRender(taskFn: () => void): () => void{\n    // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n    //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n    if (typeof window === 'undefined') {\n      // For SSR just schedule immediately.\n      return scheduler.schedule(taskFn, 0);\n    }\n\n    if (typeof window.requestAnimationFrame === 'undefined') {\n      const frameMs = 16;\n      return scheduler.schedule(taskFn, frameMs);\n    }\n\n    const id = window.requestAnimationFrame(taskFn);\n    return () => window.cancelAnimationFrame(id);\n  },\n};\n\n/**\n * Convert a camelCased string to kebab-cased.\n */\nexport function camelToDashCase(input: string): string {\n  return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n */\nexport function createCustomEvent(doc: Document, name: string, detail: any): CustomEvent {\n  const bubbles = false;\n  const cancelable = false;\n\n  // On IE9-11, `CustomEvent` is not a constructor.\n  if (typeof CustomEvent !== 'function') {\n    const event = doc.createEvent('CustomEvent');\n    event.initCustomEvent(name, bubbles, cancelable, detail);\n    return event;\n  }\n\n  return new CustomEvent(name, {bubbles, cancelable, detail});\n}\n\n/**\n * Check whether the input is an `Element`.\n */\nexport function isElement(node: Node | null): node is Element {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n\n/**\n * Check whether the input is a function.\n */\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\n/**\n * Convert a kebab-cased string to camelCased.\n */\nexport function kebabToCamelCase(input: string): string {\n  return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\n\n/**\n * Check whether an `Element` matches a CSS selector.\n */\nexport function matchesSelector(element: Element, selector: string): boolean {\n  return matches.call(element, selector);\n}\n\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(value1: any, value2: any): boolean {\n  return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n\n/** Gets a map of default set of attributes to observe and the properties they affect. */\nexport function getDefaultAttributeToPropertyInputs(\n    inputs: {propName: string, templateName: string}[]) {\n  const attributeToPropertyInputs: {[key: string]: string} = {};\n  inputs.forEach(({propName, templateName}) => {\n    attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n  });\n\n  return attributeToPropertyInputs;\n}\n\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\nexport function getComponentInputs(\n    component: Type<any>, injector: Injector): {propName: string, templateName: string}[] {\n  const componentFactoryResolver: ComponentFactoryResolver = injector.get(ComponentFactoryResolver);\n  const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// NOTE: This is a (slightly improved) version of what is used in ngUpgrade's\n//       `DowngradeComponentAdapter`.\n// TODO(gkalpak): Investigate if it makes sense to share the code.\n\nimport {isElement, matchesSelector} from './utils';\n\nexport function extractProjectableNodes(host: HTMLElement, ngContentSelectors: string[]): Node[][] {\n  const nodes = host.childNodes;\n  const projectableNodes: Node[][] = ngContentSelectors.map(() => []);\n  let wildcardIndex = -1;\n\n  ngContentSelectors.some((selector, i) => {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n    return false;\n  });\n\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const node = nodes[i];\n    const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingIndex(node: Node, selectors: string[], defaultIndex: number): number {\n  let matchingIndex = defaultIndex;\n\n  if (isElement(node)) {\n    selectors.some((selector, i) => {\n      if ((selector !== '*') && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  return matchingIndex;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentFactory, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, OnChanges, SimpleChange, SimpleChanges, Type} from '@angular/core';\nimport {Observable, merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {NgElementStrategy, NgElementStrategyEvent, NgElementStrategyFactory} from './element-strategy';\nimport {extractProjectableNodes} from './extract-projectable-nodes';\nimport {isFunction, scheduler, strictEquals} from './utils';\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\nconst DESTROY_DELAY = 10;\n\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategyFactory implements NgElementStrategyFactory {\n  componentFactory: ComponentFactory<any>;\n\n  constructor(private component: Type<any>, private injector: Injector) {\n    this.componentFactory =\n        injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n  }\n\n  create(injector: Injector) {\n    return new ComponentNgElementStrategy(this.componentFactory, injector);\n  }\n}\n\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategy implements NgElementStrategy {\n  /** Merged stream of the component's output events. */\n  // TODO(issue/24571): remove '!'.\n  events !: Observable<NgElementStrategyEvent>;\n\n  /** Reference to the component that was created on connect. */\n  // TODO(issue/24571): remove '!'.\n  private componentRef !: ComponentRef<any>| null;\n\n  /** Changes that have been made to the component ref since the last time onChanges was called. */\n  private inputChanges: SimpleChanges|null = null;\n\n  /** Whether the created component implements the onChanges function. */\n  private implementsOnChanges = false;\n\n  /** Whether a change detection has been scheduled to run on the component. */\n  private scheduledChangeDetectionFn: (() => void)|null = null;\n\n  /** Callback function that when called will cancel a scheduled destruction on the component. */\n  private scheduledDestroyFn: (() => void)|null = null;\n\n  /** Initial input values that were set before the component was created. */\n  private readonly initialInputValues = new Map<string, any>();\n\n  /** Set of inputs that were not initially set when the component was created. */\n  private readonly uninitializedInputs = new Set<string>();\n\n  constructor(private componentFactory: ComponentFactory<any>, private injector: Injector) {}\n\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n  connect(element: HTMLElement) {\n    // If the element is marked to be destroyed, cancel the task since the component was reconnected\n    if (this.scheduledDestroyFn !== null) {\n      this.scheduledDestroyFn();\n      this.scheduledDestroyFn = null;\n      return;\n    }\n\n    if (!this.componentRef) {\n      this.initializeComponent(element);\n    }\n  }\n\n  /**\n   * Schedules the component to be destroyed after some small delay in case the element is just\n   * being moved across the DOM.\n   */\n  disconnect() {\n    // Return if there is no componentRef or the component is already scheduled for destruction\n    if (!this.componentRef || this.scheduledDestroyFn !== null) {\n      return;\n    }\n\n    // Schedule the component to be destroyed after a small timeout in case it is being\n    // moved elsewhere in the DOM\n    this.scheduledDestroyFn = scheduler.schedule(() => {\n      if (this.componentRef) {\n        this.componentRef !.destroy();\n        this.componentRef = null;\n      }\n    }, DESTROY_DELAY);\n  }\n\n  /**\n   * Returns the component property value. If the component has not yet been created, the value is\n   * retrieved from the cached initialization values.\n   */\n  getInputValue(property: string): any {\n    if (!this.componentRef) {\n      return this.initialInputValues.get(property);\n    }\n\n    return (this.componentRef.instance as any)[property];\n  }\n\n  /**\n   * Sets the input value for the property. If the component has not yet been created, the value is\n   * cached and set when the component is created.\n   */\n  setInputValue(property: string, value: any): void {\n    if (strictEquals(value, this.getInputValue(property))) {\n      return;\n    }\n\n    if (!this.componentRef) {\n      this.initialInputValues.set(property, value);\n      return;\n    }\n\n    this.recordInputChange(property, value);\n    (this.componentRef.instance as any)[property] = value;\n    this.scheduleDetectChanges();\n  }\n\n  /**\n   * Creates a new component through the component factory with the provided element host and\n   * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n   */\n  protected initializeComponent(element: HTMLElement) {\n    const childInjector = Injector.create({providers: [], parent: this.injector});\n    const projectableNodes =\n        extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n    this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n\n    this.implementsOnChanges =\n        isFunction((this.componentRef.instance as any as OnChanges).ngOnChanges);\n\n    this.initializeInputs();\n    this.initializeOutputs();\n\n    this.detectChanges();\n\n    const applicationRef = this.injector.get<ApplicationRef>(ApplicationRef);\n    applicationRef.attachView(this.componentRef.hostView);\n  }\n\n  /** Set any stored initial inputs on the component's properties. */\n  protected initializeInputs(): void {\n    this.componentFactory.inputs.forEach(({propName}) => {\n      const initialValue = this.initialInputValues.get(propName);\n      if (initialValue) {\n        this.setInputValue(propName, initialValue);\n      } else {\n        // Keep track of inputs that were not initialized in case we need to know this for\n        // calling ngOnChanges with SimpleChanges\n        this.uninitializedInputs.add(propName);\n      }\n    });\n\n    this.initialInputValues.clear();\n  }\n\n  /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n  protected initializeOutputs(): void {\n    const eventEmitters = this.componentFactory.outputs.map(({propName, templateName}) => {\n      const emitter = (this.componentRef !.instance as any)[propName] as EventEmitter<any>;\n      return emitter.pipe(map((value: any) => ({name: templateName, value})));\n    });\n\n    this.events = merge(...eventEmitters);\n  }\n\n  /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n  protected callNgOnChanges(): void {\n    if (!this.implementsOnChanges || this.inputChanges === null) {\n      return;\n    }\n\n    // Cache the changes and set inputChanges to null to capture any changes that might occur\n    // during ngOnChanges.\n    const inputChanges = this.inputChanges;\n    this.inputChanges = null;\n    (this.componentRef !.instance as any as OnChanges).ngOnChanges(inputChanges);\n  }\n\n  /**\n   * Schedules change detection to run on the component.\n   * Ignores subsequent calls if already scheduled.\n   */\n  protected scheduleDetectChanges(): void {\n    if (this.scheduledChangeDetectionFn) {\n      return;\n    }\n\n    this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n      this.scheduledChangeDetectionFn = null;\n      this.detectChanges();\n    });\n  }\n\n  /**\n   * Records input changes so that the component receives SimpleChanges in its onChanges function.\n   */\n  protected recordInputChange(property: string, currentValue: any): void {\n    // Do not record the change if the component does not implement `OnChanges`.\n    if (this.componentRef && !this.implementsOnChanges) {\n      return;\n    }\n\n    if (this.inputChanges === null) {\n      this.inputChanges = {};\n    }\n\n    // If there already is a change, modify the current value to match but leave the values for\n    // previousValue and isFirstChange.\n    const pendingChange = this.inputChanges[property];\n    if (pendingChange) {\n      pendingChange.currentValue = currentValue;\n      return;\n    }\n\n    const isFirstChange = this.uninitializedInputs.has(property);\n    this.uninitializedInputs.delete(property);\n\n    const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n    this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n  }\n\n  /** Runs change detection on the component. */\n  protected detectChanges(): void {\n    if (!this.componentRef) {\n      return;\n    }\n\n    this.callNgOnChanges();\n    this.componentRef !.changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, Type} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentNgElementStrategyFactory} from './component-factory-strategy';\nimport {NgElementStrategy, NgElementStrategyFactory} from './element-strategy';\nimport {createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs} from './utils';\n\n/**\n * Prototype for a class constructor based on an Angular component\n * that can be used for custom element registration. Implemented and returned\n * by the {@link createCustomElement createCustomElement() function}.\n *\n * @publicApi\n */\nexport interface NgElementConstructor<P> {\n  /**\n   * An array of observed attribute names for the custom element,\n   * derived by transforming input property names from the source component.\n   */\n  readonly observedAttributes: string[];\n\n  /**\n   * Initializes a constructor instance.\n   * @param injector The source component's injector.\n   */\n  new (injector: Injector): NgElement&WithProperties<P>;\n}\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\nexport abstract class NgElement extends HTMLElement {\n  /**\n   * The strategy that controls how a component is transformed in a custom element.\n   */\n  // TODO(issue/24571): remove '!'.\n  protected ngElementStrategy !: NgElementStrategy;\n  /**\n   * A subscription to change, connect, and disconnect events in the custom element.\n   */\n  protected ngElementEventsSubscription: Subscription|null = null;\n\n  /**\n    * Prototype for a handler that responds to a change in an observed attribute.\n    * @param attrName The name of the attribute that has changed.\n    * @param oldValue The previous value of the attribute.\n    * @param newValue The new value of the attribute.\n    * @param namespace The namespace in which the attribute is defined.\n    * @returns Nothing.\n    */\n  abstract attributeChangedCallback(\n      attrName: string, oldValue: string|null, newValue: string, namespace?: string): void;\n  /**\n   * Prototype for a handler that responds to the insertion of the custom element in the DOM.\n   * @returns Nothing.\n   */\n  abstract connectedCallback(): void;\n  /**\n   * Prototype for a handler that responds to the deletion of the custom element from the DOM.\n   * @returns Nothing.\n   */\n  abstract disconnectedCallback(): void;\n}\n\n/**\n * Additional type information that can be added to the NgElement class,\n * for properties that are added based\n * on the inputs and methods of the underlying component.\n *\n * @publicApi\n */\nexport type WithProperties<P> = {\n  [property in keyof P]: P[property]\n};\n\n/**\n * A configuration that initializes an NgElementConstructor with the\n * dependencies and strategy it needs to transform a component into\n * a custom element class.\n *\n * @publicApi\n */\nexport interface NgElementConfig {\n  /**\n   * The injector to use for retrieving the component's factory.\n   */\n  injector: Injector;\n  /**\n   * An optional custom strategy factory to use instead of the default.\n   * The strategy controls how the transformation is performed.\n   */\n  strategyFactory?: NgElementStrategyFactory;\n}\n\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\nexport function createCustomElement<P>(\n    component: Type<any>, config: NgElementConfig): NgElementConstructor<P> {\n  const inputs = getComponentInputs(component, config.injector);\n\n  const strategyFactory =\n      config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  class NgElementImpl extends NgElement {\n    // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n    // field externs. So using quoted access to explicitly prevent renaming.\n    static readonly['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n\n    constructor(injector?: Injector) {\n      super();\n\n      // Note that some polyfills (e.g. document-register-element) do not call the constructor.\n      // Do not assume this strategy has been created.\n      // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n      // now this is tested using a Google internal test suite.\n      this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n    }\n\n    attributeChangedCallback(\n        attrName: string, oldValue: string|null, newValue: string, namespace?: string): void {\n      if (!this.ngElementStrategy) {\n        this.ngElementStrategy = strategyFactory.create(config.injector);\n      }\n\n      const propName = attributeToPropertyInputs[attrName] !;\n      this.ngElementStrategy.setInputValue(propName, newValue);\n    }\n\n    connectedCallback(): void {\n      if (!this.ngElementStrategy) {\n        this.ngElementStrategy = strategyFactory.create(config.injector);\n      }\n\n      this.ngElementStrategy.connect(this);\n\n      // Listen for events from the strategy and dispatch them as custom events\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = createCustomEvent(this.ownerDocument !, e.name, e.value);\n        this.dispatchEvent(customEvent);\n      });\n    }\n\n    disconnectedCallback(): void {\n      if (this.ngElementStrategy) {\n        this.ngElementStrategy.disconnect();\n      }\n\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n  }\n\n  // Add getters and setters to the prototype for each property input. If the config does not\n  // contain property inputs, use all inputs by default.\n  inputs.map(({propName}) => propName).forEach(property => {\n    Object.defineProperty(NgElementImpl.prototype, property, {\n      get: function() { return this.ngElementStrategy.getInputValue(property); },\n      set: function(newValue: any) { this.ngElementStrategy.setInputValue(property, newValue); },\n      configurable: true,\n      enumerable: true,\n    });\n  });\n\n  return (NgElementImpl as any) as NgElementConstructor<P>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n/**\n * @publicApi\n */\nexport const VERSION = new Version('7.0.4');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}