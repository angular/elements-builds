{"version":3,"file":"elements.js","sources":["../../../packages/elements/src/utils.js","../../../packages/elements/src/extract-projectable-nodes.js","../../../packages/elements/src/component-factory-strategy.js","../../../packages/elements/src/create-custom-element.js","../../../packages/elements/src/version.js","../../../packages/elements/public_api.js","../../../packages/elements/elements.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { ComponentFactoryResolver } from '@angular/core';\nconst /** @type {?} */ elProto = /** @type {?} */ (Element.prototype);\nconst /** @type {?} */ matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n    elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nexport const /** @type {?} */ scheduler = {\n    /**\n     * Schedule a callback to be called after some delay.\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @param {?} delay\n     * @return {?}\n     */\n    schedule(taskFn, delay) { const /** @type {?} */ id = window.setTimeout(taskFn, delay); return () => window.clearTimeout(id); },\n    /**\n     * Schedule a callback to be called before the next render.\n     * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @return {?}\n     */\n    scheduleBeforeRender(taskFn) {\n        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n        if (typeof window.requestAnimationFrame === 'undefined') {\n            const /** @type {?} */ frameMs = 16;\n            return scheduler.schedule(taskFn, frameMs);\n        }\n        const /** @type {?} */ id = window.requestAnimationFrame(taskFn);\n        return () => window.cancelAnimationFrame(id);\n    },\n};\n/**\n * Convert a camelCased string to kebab-cased.\n * @param {?} input\n * @return {?}\n */\nexport function camelToDashCase(input) {\n    return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n * @param {?} doc\n * @param {?} name\n * @param {?} detail\n * @return {?}\n */\nexport function createCustomEvent(doc, name, detail) {\n    const /** @type {?} */ bubbles = false;\n    const /** @type {?} */ cancelable = false;\n    // On IE9-11, `CustomEvent` is not a constructor.\n    if (typeof CustomEvent !== 'function') {\n        const /** @type {?} */ event = doc.createEvent('CustomEvent');\n        event.initCustomEvent(name, bubbles, cancelable, detail);\n        return event;\n    }\n    return new CustomEvent(name, { bubbles, cancelable, detail });\n}\n/**\n * Check whether the input is an `Element`.\n * @param {?} node\n * @return {?}\n */\nexport function isElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n * @param {?} input\n * @return {?}\n */\nexport function kebabToCamelCase(input) {\n    return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\n/**\n * Check whether an `Element` matches a CSS selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nexport function matchesSelector(element, selector) {\n    return matches.call(element, selector);\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} value1\n * @param {?} value2\n * @return {?}\n */\nexport function strictEquals(value1, value2) {\n    return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n/**\n * Gets a map of default set of attributes to observe and the properties they affect.\n * @param {?} inputs\n * @return {?}\n */\nexport function getDefaultAttributeToPropertyInputs(inputs) {\n    const /** @type {?} */ attributeToPropertyInputs = {};\n    inputs.forEach(({ propName, templateName }) => {\n        attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n    });\n    return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n * @param {?} component\n * @param {?} injector\n * @return {?}\n */\nexport function getComponentInputs(component, injector) {\n    const /** @type {?} */ componentFactoryResolver = injector.get(ComponentFactoryResolver);\n    const /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n    return componentFactory.inputs;\n}\n//# sourceMappingURL=utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isElement, matchesSelector } from './utils';\n/**\n * @param {?} host\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function extractProjectableNodes(host, ngContentSelectors) {\n    const /** @type {?} */ nodes = host.childNodes;\n    const /** @type {?} */ projectableNodes = ngContentSelectors.map(() => []);\n    let /** @type {?} */ wildcardIndex = -1;\n    ngContentSelectors.some((selector, i) => {\n        if (selector === '*') {\n            wildcardIndex = i;\n            return true;\n        }\n        return false;\n    });\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = nodes.length; i < ii; ++i) {\n        const /** @type {?} */ node = nodes[i];\n        const /** @type {?} */ ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n        if (ngContentIndex !== -1) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} node\n * @param {?} selectors\n * @param {?} defaultIndex\n * @return {?}\n */\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n    let /** @type {?} */ matchingIndex = defaultIndex;\n    if (isElement(node)) {\n        selectors.some((selector, i) => {\n            if ((selector !== '*') && matchesSelector(node, selector)) {\n                matchingIndex = i;\n                return true;\n            }\n            return false;\n        });\n    }\n    return matchingIndex;\n}\n//# sourceMappingURL=extract-projectable-nodes.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ComponentFactoryResolver, Injector, SimpleChange } from '@angular/core';\nimport { merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { extractProjectableNodes } from './extract-projectable-nodes';\nimport { isFunction, scheduler, strictEquals } from './utils';\n/**\n * Time in milliseconds to wait before destroying the component ref when disconnected.\n */\nconst /** @type {?} */ DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * \\@experimental\n */\nexport class ComponentNgElementStrategyFactory {\n    /**\n     * @param {?} component\n     * @param {?} injector\n     */\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n        this.componentFactory =\n            injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n    }\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    create(injector) {\n        return new ComponentNgElementStrategy(this.componentFactory, injector);\n    }\n}\nfunction ComponentNgElementStrategyFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.componentFactory;\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.component;\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.injector;\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * \\@experimental\n */\nexport class ComponentNgElementStrategy {\n    /**\n     * @param {?} componentFactory\n     * @param {?} injector\n     */\n    constructor(componentFactory, injector) {\n        this.componentFactory = componentFactory;\n        this.injector = injector;\n        /**\n         * Changes that have been made to the component ref since the last time onChanges was called.\n         */\n        this.inputChanges = null;\n        /**\n         * Whether the created component implements the onChanges function.\n         */\n        this.implementsOnChanges = false;\n        /**\n         * Whether a change detection has been scheduled to run on the component.\n         */\n        this.scheduledChangeDetectionFn = null;\n        /**\n         * Callback function that when called will cancel a scheduled destruction on the component.\n         */\n        this.scheduledDestroyFn = null;\n        /**\n         * Initial input values that were set before the component was created.\n         */\n        this.initialInputValues = new Map();\n        /**\n         * Set of inputs that were not initially set when the component was created.\n         */\n        this.uninitializedInputs = new Set();\n    }\n    /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     * @param {?} element\n     * @return {?}\n     */\n    connect(element) {\n        // If the element is marked to be destroyed, cancel the task since the component was reconnected\n        if (this.scheduledDestroyFn !== null) {\n            this.scheduledDestroyFn();\n            this.scheduledDestroyFn = null;\n            return;\n        }\n        if (!this.componentRef) {\n            this.initializeComponent(element);\n        }\n    }\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     * @return {?}\n     */\n    disconnect() {\n        // Return if there is no componentRef or the component is already scheduled for destruction\n        if (!this.componentRef || this.scheduledDestroyFn !== null) {\n            return;\n        }\n        // Schedule the component to be destroyed after a small timeout in case it is being\n        // moved elsewhere in the DOM\n        this.scheduledDestroyFn = scheduler.schedule(() => {\n            if (this.componentRef) {\n                /** @type {?} */ ((this.componentRef)).destroy();\n                this.componentRef = null;\n            }\n        }, DESTROY_DELAY);\n    }\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     * @param {?} property\n     * @return {?}\n     */\n    getInputValue(property) {\n        if (!this.componentRef) {\n            return this.initialInputValues.get(property);\n        }\n        return (/** @type {?} */ (this.componentRef.instance))[property];\n    }\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    setInputValue(property, value) {\n        if (strictEquals(value, this.getInputValue(property))) {\n            return;\n        }\n        if (!this.componentRef) {\n            this.initialInputValues.set(property, value);\n            return;\n        }\n        this.recordInputChange(property, value);\n        (/** @type {?} */ (this.componentRef.instance))[property] = value;\n        this.scheduleDetectChanges();\n    }\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     * @param {?} element\n     * @return {?}\n     */\n    initializeComponent(element) {\n        const /** @type {?} */ childInjector = Injector.create({ providers: [], parent: this.injector });\n        const /** @type {?} */ projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n        this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n        this.implementsOnChanges =\n            isFunction((/** @type {?} */ ((this.componentRef.instance))).ngOnChanges);\n        this.initializeInputs();\n        this.initializeOutputs();\n        this.detectChanges();\n        const /** @type {?} */ applicationRef = this.injector.get(ApplicationRef);\n        applicationRef.attachView(this.componentRef.hostView);\n    }\n    /**\n     * Set any stored initial inputs on the component's properties.\n     * @return {?}\n     */\n    initializeInputs() {\n        this.componentFactory.inputs.forEach(({ propName }) => {\n            const /** @type {?} */ initialValue = this.initialInputValues.get(propName);\n            if (initialValue) {\n                this.setInputValue(propName, initialValue);\n            }\n            else {\n                // Keep track of inputs that were not initialized in case we need to know this for\n                // calling ngOnChanges with SimpleChanges\n                this.uninitializedInputs.add(propName);\n            }\n        });\n        this.initialInputValues.clear();\n    }\n    /**\n     * Sets up listeners for the component's outputs so that the events stream emits the events.\n     * @return {?}\n     */\n    initializeOutputs() {\n        const /** @type {?} */ eventEmitters = this.componentFactory.outputs.map(({ propName, templateName }) => {\n            const /** @type {?} */ emitter = /** @type {?} */ ((/** @type {?} */ (((this.componentRef)).instance))[propName]);\n            return emitter.pipe(map((value) => ({ name: templateName, value })));\n        });\n        this.events = merge(...eventEmitters);\n    }\n    /**\n     * Calls ngOnChanges with all the inputs that have changed since the last call.\n     * @return {?}\n     */\n    callNgOnChanges() {\n        if (!this.implementsOnChanges || this.inputChanges === null) {\n            return;\n        }\n        // Cache the changes and set inputChanges to null to capture any changes that might occur\n        // during ngOnChanges.\n        const /** @type {?} */ inputChanges = this.inputChanges;\n        this.inputChanges = null;\n        (/** @type {?} */ ((((this.componentRef)).instance))).ngOnChanges(inputChanges);\n    }\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     * @return {?}\n     */\n    scheduleDetectChanges() {\n        if (this.scheduledChangeDetectionFn) {\n            return;\n        }\n        this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n            this.scheduledChangeDetectionFn = null;\n            this.detectChanges();\n        });\n    }\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     * @param {?} property\n     * @param {?} currentValue\n     * @return {?}\n     */\n    recordInputChange(property, currentValue) {\n        // Do not record the change if the component does not implement `OnChanges`.\n        if (this.componentRef && !this.implementsOnChanges) {\n            return;\n        }\n        if (this.inputChanges === null) {\n            this.inputChanges = {};\n        }\n        // If there already is a change, modify the current value to match but leave the values for\n        // previousValue and isFirstChange.\n        const /** @type {?} */ pendingChange = this.inputChanges[property];\n        if (pendingChange) {\n            pendingChange.currentValue = currentValue;\n            return;\n        }\n        const /** @type {?} */ isFirstChange = this.uninitializedInputs.has(property);\n        this.uninitializedInputs.delete(property);\n        const /** @type {?} */ previousValue = isFirstChange ? undefined : this.getInputValue(property);\n        this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n    }\n    /**\n     * Runs change detection on the component.\n     * @return {?}\n     */\n    detectChanges() {\n        if (!this.componentRef) {\n            return;\n        }\n        this.callNgOnChanges(); /** @type {?} */\n        ((this.componentRef)).changeDetectorRef.detectChanges();\n    }\n}\nfunction ComponentNgElementStrategy_tsickle_Closure_declarations() {\n    /**\n     * Merged stream of the component's output events.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.events;\n    /**\n     * Reference to the component that was created on connect.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.componentRef;\n    /**\n     * Changes that have been made to the component ref since the last time onChanges was called.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.inputChanges;\n    /**\n     * Whether the created component implements the onChanges function.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.implementsOnChanges;\n    /**\n     * Whether a change detection has been scheduled to run on the component.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.scheduledChangeDetectionFn;\n    /**\n     * Callback function that when called will cancel a scheduled destruction on the component.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.scheduledDestroyFn;\n    /**\n     * Initial input values that were set before the component was created.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.initialInputValues;\n    /**\n     * Set of inputs that were not initially set when the component was created.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.uninitializedInputs;\n    /** @type {?} */\n    ComponentNgElementStrategy.prototype.componentFactory;\n    /** @type {?} */\n    ComponentNgElementStrategy.prototype.injector;\n}\n//# sourceMappingURL=component-factory-strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentNgElementStrategyFactory } from './component-factory-strategy';\nimport { createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs } from './utils';\n/**\n * Class constructor based on an Angular Component to be used for custom element registration.\n *\n * \\@experimental\n * @record\n * @template P\n */\nexport function NgElementConstructor() { }\nfunction NgElementConstructor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgElementConstructor.prototype.observedAttributes;\n    /* TODO: handle strange member:\n    new (injector: Injector): NgElement&WithProperties<P>;\n    */\n}\n/**\n * Class that extends HTMLElement and implements the functionality needed for a custom element.\n *\n * \\@experimental\n * @abstract\n */\nexport class NgElement extends HTMLElement {\n    constructor() {\n        super(...arguments);\n        this.ngElementEventsSubscription = null;\n    }\n}\nfunction NgElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgElement.prototype.ngElementStrategy;\n    /** @type {?} */\n    NgElement.prototype.ngElementEventsSubscription;\n    /**\n     * @abstract\n     * @param {?} attrName\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?=} namespace\n     * @return {?}\n     */\n    NgElement.prototype.attributeChangedCallback = function (attrName, oldValue, newValue, namespace) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgElement.prototype.connectedCallback = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgElement.prototype.disconnectedCallback = function () { };\n}\n/**\n * Initialization configuration for the NgElementConstructor which contains the injector to be used\n * for retrieving the component's factory as well as the default context for the component. May\n * provide a custom strategy factory to be used instead of the default.\n *\n * \\@experimental\n * @record\n */\nexport function NgElementConfig() { }\nfunction NgElementConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgElementConfig.prototype.injector;\n    /** @type {?|undefined} */\n    NgElementConfig.prototype.strategyFactory;\n}\n/**\n * \\@whatItDoes Creates a custom element class based on an Angular Component. Takes a configuration\n * that provides initialization information to the created class. E.g. the configuration's injector\n * will be the initial injector set on the class which will be used for each created instance.\n *\n * \\@description Builds a class that encapsulates the functionality of the provided component and\n * uses the config's information to provide more context to the class. Takes the component factory's\n * inputs and outputs to convert them to the proper custom element API and add hooks to input\n * changes. Passes the config's injector to each created instance (may be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations).\n *\n * \\@experimental\n * @template P\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nexport function createCustomElement(component, config) {\n    const /** @type {?} */ inputs = getComponentInputs(component, config.injector);\n    const /** @type {?} */ strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n    const /** @type {?} */ attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n    class NgElementImpl extends NgElement {\n        /**\n         * @param {?=} injector\n         */\n        constructor(injector) {\n            super();\n            this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n        }\n        /**\n         * @param {?} attrName\n         * @param {?} oldValue\n         * @param {?} newValue\n         * @param {?=} namespace\n         * @return {?}\n         */\n        attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n            const /** @type {?} */ propName = /** @type {?} */ ((attributeToPropertyInputs[attrName]));\n            this.ngElementStrategy.setInputValue(propName, newValue);\n        }\n        /**\n         * @return {?}\n         */\n        connectedCallback() {\n            this.ngElementStrategy.connect(this);\n            // Listen for events from the strategy and dispatch them as custom events\n            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n                const /** @type {?} */ customEvent = createCustomEvent(this.ownerDocument, e.name, e.value);\n                this.dispatchEvent(customEvent);\n            });\n        }\n        /**\n         * @return {?}\n         */\n        disconnectedCallback() {\n            this.ngElementStrategy.disconnect();\n            if (this.ngElementEventsSubscription) {\n                this.ngElementEventsSubscription.unsubscribe();\n                this.ngElementEventsSubscription = null;\n            }\n        }\n    }\n    NgElementImpl.observedAttributes = Object.keys(attributeToPropertyInputs);\n    function NgElementImpl_tsickle_Closure_declarations() {\n        /** @type {?} */\n        NgElementImpl.observedAttributes;\n    }\n    // Add getters and setters to the prototype for each property input. If the config does not\n    // contain property inputs, use all inputs by default.\n    inputs.map(({ propName }) => propName).forEach(property => {\n        Object.defineProperty(NgElementImpl.prototype, property, {\n            get: function () { return this.ngElementStrategy.getInputValue(property); },\n            set: function (newValue) { this.ngElementStrategy.setInputValue(property, newValue); },\n            configurable: true,\n            enumerable: true,\n        });\n    });\n    return /** @type {?} */ ((/** @type {?} */ (NgElementImpl)));\n}\n//# sourceMappingURL=create-custom-element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version } from '@angular/core';\n/**\n * \\@experimental\n */\nexport const /** @type {?} */ VERSION = new Version('6.0.0-rc.0-bcaa07b');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { NgElement, createCustomElement } from './src/create-custom-element';\nexport { VERSION } from './src/version';\n// This file only reexports content of the `src` folder. Keep it that way.\n//# sourceMappingURL=public_api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgElement, createCustomElement, VERSION } from './public_api';\n//# sourceMappingURL=elements.js.map"],"names":[],"mappings":"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"}